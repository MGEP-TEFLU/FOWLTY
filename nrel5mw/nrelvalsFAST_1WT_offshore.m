%% NREL 5MW data generation.
% Calculates parameters for a floating NREL 5 MW turbine based on CT/CP tables and data available 
% in [1] and in [2] for the hydrodynamic description of the platform. The cp and thrust tables for 
% FOWLTY can be found in nrel_cp.tsv and nrel_thrust.tsv.
%
% They were generated using wt_perf.exe (see https://wind.nrel.gov/designcodes/simulators/wtperf/)
% New versions of the tables has been added including the scripts to generate them. 
% Everything can be found in the wt_perf/ subdirectory. See the README.txt file herin to get further details.
%
% [1] Definition of a 5-MW Reference Wind Turbine for Offshore System Development
%  J. Jonkman, S. Butterfield, W. Musial, and G. Scott
% [2] Definition of the Semisubmersible Floating System for Phase II of OC4
% A. Robertson, J. Jonkman, M. Masciola, H. Song, A. Goupee, A. Coulling, and C. Luan
%
% Author Jacob Grunnet
% Modified by Mikael Svenstrup
% Modified by Yerai Peña-Sanchez in 2022
% ------------------------------------------------------------------------------------------------------------

% clear;

% Want interactive data storage?
interactive = true;


%% Basic wind turbine parameters used in calculations
rho     = 1.2231;                                                       % Air density
R       = 63;                                                           % Rotor radius
omega   = 12.1/60*2*pi;                                                 % Rotor speed used in wt_perf
N       = 97;                                                           % Gearbox ratio


%% CT and CP tables
% % Load CP and thrust files (select which version of WT_Perf data you want
cp      = load('wt_perf/nrel_cp_12rmp_v310.oup','-ascii');
F       = load('wt_perf/nrel_ct_12rmp_v310.oup','-ascii');

omega   = cp(1)/60*2*pi;                                                % Extract the rotational speed that was used in wt_perf
beta    = cp(2:end,1);                                                  % Extract pitch
tsr     = cp(1,2:end);                                                  % Extract tip speed ratio
cp      = cp(2:end,2:end);                                              % Extract power coefficent
F       = F(2:end,2:end);                                               % Extract Thrust

% % You can also load directly from the file generated by WT_Perf, however it takes a little more processing. 
% % But you do not have to split the data into separate files manually.
% filename = 'wt_perf/NRELOffshrBsline5MW_WTPref310.oup';
% [cp F beta tsr omega] = processWT_Perf_file(filename);

% % Convert thrust force to N (can also be changed in a setting in the .wtp file)
kN_to_N = 1000;
F       = F*kN_to_N;

% % Find the few unconverged cases from WT_Perf and do simple interpolation to fix the table
[cp F]  = fix_cp_table(cp,false,F,beta,tsr);

u       = omega*R./tsr;                                                 % Derived wind speeds

% % Compute thrust coefficient for each TSR
ct      = 2*F/(rho*pi*R^2).*repmat(tsr,length(beta),1).^2/(omega^2*R^2);


%% Make ENV, WT, and PLAT structures
env.rho             = rho;

% % CP and CT tables
wt.cp.table         = cp;
wt.cp.beta          = beta;
wt.cp.tsr           = tsr;

wt.ct.table         = ct;
wt.ct.beta          = beta;
wt.ct.tsr           = tsr;

% % Blade properties
wt.blade.mass       = 17740;                                            % [kg]
wt.blade.inertia    = 11776047;                                         % [kgm^2]
wt.blade.length     = 61.5;                                             % [m]

% % Hub properties
wt.hub.height       = 90;                                               % [m]
wt.hub.inertia      = 115926;                                           % [kgm^2]
wt.hub.radius       = 1.5;                                              % [m]
wt.hub.mass         = 56780;                                            % [kg]

% % Nacelle properties
wt.nac.mass         = 240000;                                           % [kg]

% % Tower properties
wt.tower.mass       = 347462;                                           % [kg]
wt.tower.height     = 87.6;                                             % [m]
wt.tower.damp       = .08;
wt.tower.eigfreq    = (.32)/(sqrt(1-wt.tower.damp^2));                  % Calculate undamped freq

% % Generator properties
wt.gen.inertia      = 534.116;                                          % [kgm²] around HSS
wt.gen.N            = N;                                                % Gear ratio
wt.gen.effeciency   = 0.944;
wt.gen.ratedspeed   = 1173.7*2*pi/60;                                   % [rad/s]
wt.gen.timeconstant = 0.1;                                              % [s]

% % Rotor properties (LSS)
wt.rotor.spring     = 867637000;                                        % [Nm/rad]
wt.rotor.damp       = 6215000;                                          % [Nm/(rad*s)]
wt.rotor.radius     = wt.hub.radius+wt.blade.length;                    % [m]
wt.rotor.inertia    = wt.hub.inertia+3*wt.blade.inertia;                % [kgm^2]
wt.rotor.mass       = wt.hub.mass+3*wt.blade.mass;                      % [kg]
wt.rotor.ratedspeed = 12.1*pi/30;                                       % [rad/s]

% % Drive train state-space definition
wt.dt.ssA           = [-wt.rotor.damp/wt.rotor.inertia            wt.rotor.damp/(wt.rotor.inertia*wt.gen.N)   -wt.rotor.spring/wt.rotor.inertia ;...
                        wt.rotor.damp/(wt.gen.inertia*wt.gen.N)  -wt.rotor.damp/(wt.gen.inertia*(wt.gen.N^2))  wt.rotor.spring/(wt.gen.inertia*wt.gen.N);...
                        1                                        -1/wt.gen.N                                   0];
wt.dt.ssB           = [1/wt.rotor.inertia   0;...
                       0                   -1/wt.gen.inertia;...
                       0                    0];
wt.dt.ssC           = blkdiag(eye(2),wt.rotor.spring);
wt.dt.ssD           = zeros(3,2);

% % Second order pitch actuator properties (defined as \ddot(B) + 2*damp*omega*\dot(B) + omega^2*B = omega^2*B_ref)
wt.pitch.omega      = 11.11;                                            % [rad/s]
wt.pitch.damp       = 0.6;
wt.pitch.ssA        = [0 1; -wt.pitch.omega^2 -2*wt.pitch.omega*wt.pitch.damp];
wt.pitch.ssB        = [0; wt.pitch.omega^2];
wt.pitch.ssC        = [1 0];
wt.pitch.ssD        = 0;

wt.pitch.sysPitch   = ss([0 1; -wt.pitch.omega^2 -2*wt.pitch.omega*wt.pitch.damp],[0; wt.pitch.omega^2],[1 0],0);

% % Tower top properties
wt.top.mass         = wt.nac.mass+wt.rotor.mass;

% % Platform hydrodynamic coefficients
% plat.hydCoeff       = load('DeepCWind_original.mat');                   % Hydrodynamic coefficients of the platform for surge, heave, and pitch
% plat.DoF            = [1 2];                                            % From the original data which DoFs are considered (surge and pitch, in this case)
% plat.nDoF           = length(plat.DoF);                                 % Number of DoFs considered
% plat.Fe             = plat.hydCoeff.Fe(:,plat.DoF);                     % Hydrodynamic excitation force frequency-domain parameters for the considered DoFs
% plat.Mu             = plat.hydCoeff.Mu(plat.DoF,plat.DoF);              % Infinite frequency added mass for the considered DoFs
% plat.Kh             = plat.hydCoeff.Kh(plat.DoF,plat.DoF);              % Hydrostatic stiffness for the considered DoFs
% 
% % % Platform mechanical properties
% plat.CGz            = -13.46;                                           % [m] Distance from still water level to the center of grabity of the platform (including WT)
% plat.Mass           = plat.hydCoeff.Mass(plat.DoF,plat.DoF);            % Platform mass and inertia values (considering the WT) for the considered DoFs 
% plat.K_moo          = [7.08e4   0      -1.08e5; ...
%                        0        1.91e4  0     ; ...
%                       -1.07e5   0       8.73e7];                        % Mooring stiffness values for surge, heave, and pitch
% plat.K_moo          = plat.K_moo(plat.DoF,plat.DoF);                    % Mooring stiffness for the considered DoFs
% plat.B_drag         = diag([3.95e5,3.88e6,3.7e10]);                     % Viscous drag coefficient for surge, heave, and pitch
% plat.B_drag         = plat.B_drag(plat.DoF,plat.DoF);                   % Viscous drag coefficient for the considered DOFs
% 
% load('DeepCWind_13DoF_RadSS.mat');                                      % State-space system for the radiation force convolution term approximation 
% nR                  = length(sysRad.a);
% 
% Ass                 = [Ass_t Bss_t*sysRad.c ; sysRad.b*CssV_t sysRad.a];
% Bss                 = [Bss_t ; zeros(nR,plat.nDoF)];
% CssP                = [kron(eye(plat.nDoF),[1 0]) zeros(plat.nDoF,nR)]; % To output positions
% CssV                = [CssV_t zeros(plat.nDoF,nR)];                     % To output velocities
% CssPV               = [eye(2*plat.nDoF) zeros(2*plat.nDoF,nR)];         % To output both position and belocities of the defined DoFs

plat.hydCoeff       = load('spar_OC3.mat');                             % Hydrodynamic coefficients of the platform for surge and pitch
plat.DoF            = [1 2];                                            % From the original data which DoFs are considered (surge and pitch, in this case)
plat.nDoF           = length(plat.DoF);                                 % Number of DoFs considered
plat.Fe             = plat.hydCoeff.Fe(:,plat.DoF);                     % Hydrodynamic excitation force frequency-domain parameters for the considered DoFs
plat.Mu             = plat.hydCoeff.Mu(plat.DoF,plat.DoF);              % Infinite frequency added mass for the considered DoFs
plat.Kh             = plat.hydCoeff.Kh(plat.DoF,plat.DoF);              % Hydrostatic stiffness for the considered DoFs

% % Platform mechanical properties
plat.CGz            = plat.hydCoeff.CM(3);                                           % [m] Distance from still water level to the center of grabity of the platform (including WT)
plat.Mass           = plat.hydCoeff.Mass(plat.DoF,plat.DoF);            % Platform mass and inertia values (considering the WT) for the considered DoFs 
plat.K_moo          = plat.hydCoeff.K_moo;                        % Mooring stiffness values for surge, heave, and pitch
plat.B_drag         = plat.hydCoeff.B_drag;                   % Viscous drag coefficient for the considered DOFs

% % Nacelle to platform mapping parameters
plat.d_N2P          = wt.tower.height-plat.CGz;                         % Distance from the nacelle to the center of rotation of the platform
plat.nF2pT          = [1 ; plat.d_N2P];              % Mapping from nacelle force to platform pitch torque
% plat.nF2pT          = [zeros(plat.nDoF-1,1) ; plat.d_N2P];              % Mapping from nacelle force to platform pitch torque
plat.pM2nM_surge    = [0 1 zeros(1,2*(plat.nDoF-1))];                   % Platform surge velocity to nacelle (surge) velocity
plat.pM2nM_pitch    = [zeros(1,2*(plat.nDoF-1)) 0 plat.d_N2P];          % Platform pitch velocity to nacelle (surge) velocity

% % Hydrodynamics state-space description
MassMu              = pinv(plat.Mass+plat.Mu);

Ass_t               = kron(eye(plat.nDoF),[0 1; 0 0])+...
                      kron(MassMu*(plat.K_moo+plat.Kh),[0 0;-1 0])+...  % Stiffness terms
                      kron(MassMu*plat.B_drag,[0 0;0 -1]);              % Damping terms (linearised viscous drag)
Bss_t               = kron(MassMu,[0;1]);
CssV_t              = kron(eye(plat.nDoF),[0 1]);

nR                  = length(plat.hydCoeff.sysRad.a);

Ass                 = [Ass_t Bss_t*plat.hydCoeff.sysRad.c ; plat.hydCoeff.sysRad.b*CssV_t plat.hydCoeff.sysRad.a];
Bss                 = [Bss_t ; zeros(nR,plat.nDoF)];
CssP                = [kron(eye(plat.nDoF),[1 0]) zeros(plat.nDoF,nR)]; % To output positions
CssV                = [CssV_t zeros(plat.nDoF,nR)];                     % To output velocities
CssPV               = [eye(2*plat.nDoF) zeros(2*plat.nDoF,nR)];         % To output both position and belocities of the defined DoFs

plat.HydSys         = ss(Ass,Bss,CssPV,0);                              % Select the desired output of the SS using the Css_. In this case both position and velocities


%% Torque controller
timestep    = 0.0125;                                                   % Controller time step
fcorner     = .25;                                                      % Filter corner frequency
alpha       = exp(-2*pi*timestep*fcorner);                              % Filter parameter.

% % Torque control regions
wg_rated    = 1173.7*pi/30; %[rad/s]
wg_15       = 670*pi/30;
wg_2        = 871*pi/30;
wg_25       = 1100*pi/30;
wg_3        = 1161.963*pi/30;

% % Region 2 (optimal region)
A           = pi*R^2;                                                   % area of dish m2
cp_max      = max(max(cp));                                             % maximum cp
[i,j]       = find(cp==cp_max,1);
tsr_opt     = tsr(j);                                                   % Optimal tsr
beta_opt    = beta(i);                                                  % optimal pitch
wg_2_rot    = wg_2/N;                                                   % rotor speed at region 2 transition
k_M         = .5*rho*R^3*A*cp_max/(tsr_opt^3*N^3);                      % Optimal generator torque coefficient
M_2         = k_M*wg_2^2;                                               % generator torque at region start of 2
M_25        = k_M*wg_25^2;                                              % generator torque at region start of 2.5

% % Rated torque and power
% M_rated     = 43093.55;                                                 % [Nm]
P_rated     = 5000000/wt.gen.effeciency;                  % from discon.f90                    %M_rated*wg_rated;
M_rated     = P_rated/wg_rated;
% Prueba:
% M_rated     = 47402.91;
% P_rated     = M_rated * wg_rated;

% % Resolution for table generation
wg_res      = .1;

% % Generator speed points
wg_r        = 0:wg_res:wg_rated;

% % Region 1
wg1r        = wg_r(wg_r<wg_15);

% % Region 1.5
temp        = wg_r(wg_r>wg_15);
wg15r       = temp(temp<wg_2);

% % Region 2
temp        = wg_r(wg_r>wg_2);
wg2r        = temp(temp<wg_25);

% % Region 2.5
wg25r       = wg_r(wg_r>wg_25);

% % Torque table generation
% M_r1        = 0*wg1r;                                                   % Region 1
% M_r15       = M_2/(wg_2-wg_15)*(wg15r-wg_15);                           % Region 1.5
% M_r2        = k_M*wg2r.^2;                                              % Region 2
% M_r25       = (P_rated/wg_3-M_25)/(wg_3-wg_25)*(wg25r-wg_25)+M_25;      % Region 2.5

% M_r         = [M_r1 M_r15 M_r2 M_r25];                                  % Full table
% From discon.f90 : 
% M_r         = [0 0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	34.8083065596233	126.991321812857	219.174337066077	311.357352319297	403.540367572530	495.723382825751	587.906398078984	680.089413332204	772.272428585424	864.455443838658	956.638459091878	1048.82147434511	1141.00448959833	1233.18750485155	1325.37052010479	1417.55353535801	1509.73655061124	1601.91956586446	1694.10258111768	1786.28559637091	1878.46861162413	1970.65162687737	2062.83464213059	2155.01765738381	2247.20067263704	2339.38368789026	2431.56670314349	2523.74971839671	2615.93273364993	2708.11574890317	2800.29876415639	2892.48177940962	2984.66479466284	3076.84780991606	3169.03082516929	3261.21384042251	3353.39685567575	3445.57987092897	3537.76288618219	3629.94590143542	3722.12891668864	3814.31193194188	3906.49494719510	3998.67796244832	4090.86097770155	4183.04399295477	4275.22700820800	4367.41002346122	4459.59303871444	4551.77605396768	4643.95906922090	4736.14208447413	4828.32509972735	4920.50811498057	5012.69113023380	5104.87414548702	5197.05716074026	5289.24017599348	5381.42319124670	5473.60620649993	5565.78922175315	5657.97223700639	5750.15525225961	5842.33826751283	5934.52128276606	6026.70429801928	6118.88731327251	6211.07032852573	6303.25334377895	6395.43635903219	6487.61937428541	6579.80238953864	6671.98540479186	6764.16842004508	6856.35143529831	6948.53445055153	7040.71746580477	7132.90048105799	7225.08349631121	7317.26651156444	7409.44952681766	7501.63254207089	7593.81555732412	7685.99857257734	7778.18158783057	7870.36460308379	7962.54761833702	8054.73063359024	8146.91364884346	8239.09666409670	8331.27967934992	8423.46269460315	8515.64570985637	8607.82872510959	8700.01174036282	8792.19475561604	8884.37777086928	8976.56078612250	9068.74380137572	9160.92681662895	9253.10983188217	9345.29284713540	9437.47586238863	9529.65887764185	9621.84189289508	9714.02490814830	9806.20792340153	9898.39093865475	9990.57395390797	10082.7569691612	10174.9399844144	10267.1229996677	10359.3060149209	10451.4890301741	10543.6720454273	10635.8550606806	10728.0380759338	10820.2210911870	10912.4041064402	11004.5871216935	11096.7701369467	11188.9531521999	11281.1361674531	11373.3191827064	11465.5021979596	11557.6852132128	11649.8682284660	11742.0512437193	11834.2342589725	11926.4172742257	12018.6002894789	12110.7833047322	12202.9663199854	12295.1493352386	12387.3323504918	12479.5153657451	12571.6983809983	12663.8813962515	12756.0644115047	12848.2474267580	12940.4304420112	13032.6134572644	13124.7964725176	13216.9794877709	13309.1625030241	13401.3455182773	13493.5285335306	13585.7115487838	13677.8945640370	13770.0775792902	13862.2605945435	13954.4436097967	14046.6266250499	14138.8096403031	14230.9926555564	14323.1756708096	14415.3586860628	14507.5417013160	14599.7247165692	14691.9077318225	14784.0907470757	14876.2737623289	14968.4567775822	15060.6397928354	15152.8228080886	15245.0058233418	15337.1888385951	15429.3718538483	15521.5548691015	15613.7378843547	15705.9208996080	15798.1039148612	15890.2869301144	15982.4699453676	16074.6529606209	16166.8359758741	16259.0189911273	16351.2020063805	16443.3850216338	16535.5680368870	16627.7510521402	16719.9340673934	16812.1170826467	16904.3000978999	16996.4831131531	17088.6661284064	17180.8491436596	17273.0321589128	17365.2151741660	17457.3981894192	17549.5812046725	17641.7642199257	17733.9472351789	17826.1302504321	17918.3132656854	18010.4962809386	18102.6792961918	18194.8623114450	18287.0453266983	18379.2283419515	18471.4113572047	18563.5943724580	18655.7773877112	18747.9604029644	18840.1434182176	18932.3264334708	19024.5094487241	19116.6924639773	19208.8754792305	19301.0584944838	19393.2415097370	19441.2214230300	19483.8323065200	19526.4898357500	19569.1940107200	19611.9448314300	19654.7422978800	19697.5864100700	19740.4771680000	19783.4145716700	19826.3986210800	19869.4293162300	19912.5066571200	19955.6306437500	19998.8012761200	20042.0185542300	20085.2824780800	20128.5930476700	20171.9502630000	20215.3541240700	20258.8046308800	20302.3017834300	20345.8455817200	20389.4360257500	20433.0731155200	20476.7568510300	20520.4872322800	20564.2642592700	20608.0879320000	20651.9582504700	20695.8752146800	20739.8388246300	20783.8490803200	20827.9059817500	20872.0095289200	20916.1597218300	20960.3565604800	21004.6000448700	21048.8901750000	21093.2269508700	21137.6103724800	21182.0404398300	21226.5171529200	21271.0405117500	21315.6105163200	21360.2271666300	21404.8904626800	21449.6004044700	21494.3569920000	21539.1602252700	21584.0101042800	21628.9066290300	21673.8497995200	21718.8396157500	21763.8760777200	21808.9591854300	21854.0889388800	21899.2653380700	21944.4883830000	21989.7580736700	22035.0744100800	22080.4373922300	22125.8470201200	22171.3032937500	22216.8062131200	22262.3557782300	22307.9519890800	22353.5948456700	22399.2843480000	22445.0204960700	22490.8032898800	22536.6327294300	22582.5088147200	22628.4315457500	22674.4009225200	22720.4169450300	22766.4796132800	22812.5889272700	22858.7448870000	22904.9474924700	22951.1967436800	22997.4926406300	23043.8351833200	23090.2243717500	23136.6602059200	23183.1426858300	23229.6718114800	23276.2475828700	23322.8700000000	23369.5390628700	23416.2547714800	23463.0171258300	23509.8261259200	23556.6817717500	23603.5840633200	23650.5330006300	23697.5285836800	23744.5708124700	23791.6596870000	23838.7952072700	23885.9773732800	23933.2061850300	23980.4816425200	24027.8037457500	24075.1724947200	24122.5878894300	24170.0499298800	24217.5586160700	24265.1139480000	24312.7159256700	24360.3645490800	24408.0598182300	24455.8017331200	24503.5902937500	24551.4255001200	24599.3073522300	24647.2358500800	24695.2109936700	24743.2327830000	24791.3012180700	24839.4162988800	24887.5780254300	24935.7863977200	24984.0414157500	25032.3430795200	25080.6913890300	25129.0863442800	25177.5279452700	25226.0161920000	25274.5510844700	25323.1326226800	25371.7608066300	25420.4356363200	25469.1571117500	25517.9252329200	25566.7399998300	25615.6014124800	25664.5094708700	25713.4641750000	25762.4655248700	25811.5135204800	25860.6081618300	25909.7494489200	25958.9373817500	26008.1719603200	26057.4531846300	26106.7810546800	26156.1555704700	26205.5767320000	26255.0445392700	26304.5589922800	26354.1200910300	26403.7278355200	26453.3822257500	26503.0832617200	26552.8309434300	26602.6252708800	26652.4662440700	26702.3538630000	26752.2881276700	26802.2690380800	26852.2965942300	26902.3707961200	26952.4916437500	27002.6591371200	27052.8732762300	27103.1340610800	27153.4414916700	27203.7955680000	27254.1962900700	27304.6436578800	27355.1376714300	27405.6783307200	27456.2656357500	27506.8995865200	27557.5801830300	27608.3074252800	27659.0813132700	27709.9018470000	27760.7690264700	27811.6828516800	27862.6433226300	27913.6504393200	27964.7042017500	28015.8046099200	28066.9516638300	28118.1453634800	28169.3857088700	28220.6727000000	28272.0063368700	28323.3866194800	28374.8135478300	28426.2871219200	28477.8073417500	28529.3742073200	28580.9877186300	28632.6478756800	28684.3546784700	28736.1081270000	28787.9082212700	28839.7549612800	28891.6483470300	28943.5883785200	28995.5750557500	29047.6083787200	29099.6883474300	29151.8149618800	29203.9882220700	29256.2081280000	29308.4746796700	29360.7878770800	29413.1477202300	29465.5542091200	29518.0073437500	29570.5071241200	29623.0535502300	29675.6466220800	29728.2863396700	29780.9727030000	29833.7057120700	29886.4853668800	29939.3116674300	29992.1846137200	30045.1042057500	30098.0704435200	30151.0833270300	30204.1428562800	30257.2490312700	30310.4018520000	30363.6013184700	30416.8474306800	30470.1401886300	30523.4795923200	30576.8656417500	30630.2983369200	30683.7776778300	30737.3036644800	30790.8762968700	30844.4955750000	30898.1614988700	30951.8740684800	31005.6332838300	31059.4391449200	31113.2916517500	31167.1908043200	31221.1366026300	31275.1290466800	31329.1681364700	31383.2538720000	31437.3862532700	31491.5652802800	31545.7909530300	31600.0632715200	31654.3822357500	31708.7478457200	31763.1601014300	31817.6190028800	31872.1245500700	31926.6767430000	31981.2755816700	32035.9210660800	32090.6131962300	32145.3519721200	32200.1373937500	32254.9694611200	32309.8481742300	32364.7735330800	32419.7455376700	32474.7641880000	32529.8294840700	32584.9414258800	32640.1000134300	32695.3052467200	32750.5571257500	32805.8556505200	32861.2008210300	32916.5926372800	32972.0310992700	33027.5162070000	33374.4712513737	33767.9748515292	34161.4784516848	34554.9820518403	34948.4856519959	35341.9892521514	35735.4928523069	36128.9964524625	36522.5000526180	36916.0036527736	37309.5072529291	37703.0108530846	38096.5144532402	38490.0180533957	38883.5216535513	39277.0252537068	39670.5288538623	40064.0324540179	40457.5360541734	40851.0396543290	41244.5432544845	41638.0468546400	42031.5504547956	42425.0540549511	42818.5576551067	43212.0612552622];

%% New speed-to-torque ratio to fit FAST simulations
% wg_rated2   = 122;%1173.7*pi/30;
% wg_r        = 0:wg_res:wg_rated2;
% wg_25       = 119.6004;%119.0138;
% TEST
wg_r        = 0:wg_res:wg_rated*1.5;
wg_25       = 119.6004;%119.0138;
wg_15       = 70.16224;
wg_2        = 91.21091;
%

VS_Rgn2K    = 2.332287;

fitPar      = 13;
VS_SySp     = wg_rated/( 1.0 +  0.01*fitPar );%
VS_Slope15  = ( VS_Rgn2K*wg_2*wg_2 )/( wg_2 - wg_15 );%
VS_Slope25  = M_rated/(wg_rated - VS_SySp);%

M_r = zeros(size(wg_r));
for i = 1:length(M_r)
    if wg_r(i) > wg_rated     % > 121.6805
        M_r(i) = P_rated/wg_rated;%wg_r(i);
    elseif wg_r(i) <= wg_15    % <= 70.16224
        M_r(i) = 0;
    elseif wg_15 < wg_r(i) && wg_r(i) <= wg_2    % 70.16224 < x <= 91.21091
        M_r(i) = VS_Slope15*(wg_r(i)-wg_15);
    elseif wg_2 < wg_r(i) && wg_r(i) <= wg_25    % 91.21091 < x <= 119.0138
        M_r(i) = VS_Rgn2K*wg_r(i)*wg_r(i);
    else    % 119.0138 < x <= 121.6805
        M_r(i) = VS_Slope25*(wg_r(i)-VS_SySp);
    end
end
% open temp_offshore.fig
% hold on
% plot(wg_r,M_r)

%% Pitch controller

% % Apparent inertia at the low speed shaft
I_DT        = N^2*wt.gen.inertia+wt.rotor.inertia;

% % Control specification parameters
damp        = .7;                                                       % Damping factor
wund        = .6;                                                       % Undamped eigenfrequency
w_rot_r     = 12.1*pi/30;                                               % Optimal rotor rate


%% Calculate lookup matrix for gain scheduling
% % Power levels for gain scheduling matrix
lvls            = [1e6 2e6 3e6 4e6 5e6 5.29e6];

% % Reduce the pitch range for gs to an approimatly linear region of dp/dbeta
b_ind           = find(beta==0):find(beta==25);
beta_gs         = beta(b_ind);

% % Calculate partial derivatives of power with respect to tsr and pitch
invtsr          = tsr.^-1;                                              % Inversion of tsr

% % Power coefficient depending on tsr
K_P             = .5*rho*A*(wt.rotor.ratedspeed*R.*invtsr).^3;
for i = 1:length(K_P)
    P(:,i)      = K_P(i)*cp(:,i);
end
% % assuming .1 and .2 resolution of cp/ct
[dtsr,dbeta]    = gradient(P,.1,.2*pi/180);

% % Colors for plots
c               = 'bgrcmyk';
% % Calculate the gain scheduling values based on power level curves
for i = 1:length(lvls)
% %     Level curve cor lvl(i)
    lc          = contourc(tsr,beta_gs,P(b_ind,:),[lvls(i) lvls(i)]);
    
% %     If the cp curve contains data for beta below the value of max cp, i.e.
% %     the beta < 0 for the NREL5MW turbine. Then there may be contour lines
% %     both above and below the top of the Cp curve. It is only the one above
% %     that should be used, because this will be the operating points. It is
% %     computationally relatively difficult to calculate which level curve
% %     should be used, although you can easily see it on the figure
% %     contourf(tsr,beta_gs,P(b_ind,:),[lvls(i) lvls(i)])
% %     Therefore we just take the longest level curve.
    idx_start           = find(lc(1,:)==lvls(i));                       % Start of each level set
    [lc_length , idx]   = max(lc(2,idx_start));                         % Find the max length and which one it is
    lc                  = lc(:, idx_start(idx) + 0:lc_length);
    
% %     Spline interpolation of dp/dbeta over the level curve points
    dbl                 = interp2(tsr,beta,dbeta,lc(1,2:end),lc(2,2:end),'spline');
% %     Fit the curve to a first order polynomial
    pdbl                = polyfit(lc(2,2:end),dbl,1);
    
% %     Populate the gain scheduling table based on the polyvals
    gs(i,:)             = polyval(pdbl,beta);
    
    
%     Uncomment to plot graphs
%     figure(1)
%     plot(lc(2,2:end),dbl,['*' c(i)])
%     hold on
%     plot(beta_gs,polyval(pdbl,beta_gs),c(i));
%     figure(2)
%     hold on
%     plot(lc(2,2:end),lc(1,2:end),c(i));
    
    
end

% % Extract base gain
dpdv                    = gs(end,b_ind(1));
% % Scale matrix with base gain
gs                      = (gs/dpdv); %MS: why? This is strange. The value of dpdv is around 0 (relatively), so it could have a huge impact if it is positive or negative. Maybe it cancels out because it is included in the calculation of Kp and Ki below.
% % Hack! Make the gs independent of power level by using gains for full power
gs                      = repmat(gs(end,:),size(gs,1),1);

% % Uncomment to use values from NREL paper
% dpdv=-28.24e6;
% beta_k=6.302336; % Pitch angle causing doubling of power
% beta_r=0:.1:90;
% beta=beta_r;
% gk=1+(beta_r-beta_opt)/beta_k;
% gs=repmat(gk,size(gs,1),1);

% % Calculate base proportional and integral gains
Kp                      = 2*I_DT*w_rot_r*damp*wund/(N*dpdv);
Ki                      = I_DT*w_rot_r*wund^2/(N*dpdv);

% kp and ki from DISCON.F90 (openFAST) for floating and normal
% Kp = -0.006275604;       % 0.01882681;
% Ki = -0.0008965149;      % 0.008068634;

Kp = Kp/0.01882681*0.006275604;
ki = Ki/0.008068634*0.0008965149;

%% Fill out ctrl part of data struct

% % Pitch controller
wt.ctrl.pitch.beta      = beta;
wt.ctrl.pitch.pwr       = lvls;
wt.ctrl.pitch.gs        = gs;
wt.ctrl.pitch.Pgain     = Kp;
wt.ctrl.pitch.Igain     = Ki;
wt.ctrl.pitch.ratelim   = 8;
wt.ctrl.pitch.ulim      = 90;
wt.ctrl.pitch.llim      = 0;

% % Torque controller
wt.ctrl.torq.beta       = 0;
wt.ctrl.torq.wg         = wg_r;
wt.ctrl.torq.M          = M_r;
wt.ctrl.torq.r3         = wg_3;
wt.ctrl.torq.lim        = 4.7403e+04;     %       FROM DISCON.f90                 474502.91;
wt.ctrl.torq.ratelim    = 15e3;

% % Other control parameters
wt.ctrl.gen.rated       = wg_rated;
wt.ctrl.p_rated         = P_rated;
wt.ctrl.alpha           = alpha;
wt.ctrl.Ts              = timestep;
wt.ctrl.gen.effeciency  = 0.94;

% % Measurement system values
% % Fix these values
wt.meas.Ts              = timestep;
wt.meas.ballufres       = .01;
wt.meas.rotres          = .001;
wt.meas.aneres          = .001;
wt.meas.genres          = .01;
wt.meas.delay           = 0.01;
wt.meas.rottau          = 0.01;
wt.meas.gentau          = 0.01;

% % Save public values
pub.rotor.radius        = wt.rotor.radius;
pub.rated               = 5e6;                                          % 5MW
pub.rotor.Nslope        = 10;                                           % Blade wholer curve slope
pub.rotor.Mult          = 10e10;                                        % Ultimate load (find a value)
pub.tower.Nslope        = 4;                                            % Steel slope
pub.tower.Mult          = 10e10;                                        % Ultimate load (find a value)
pub.shaft.Nslope        = 4;                                            % Steel slope, but is that true for torsion?
pub.shaft.Mult          = 10e10;                                        % Ultimate load (find a value)

save NREL5MW.mat wt env pub plat

% % Replace data in a simulink diagram with the new data
if(interactive)
    p.wt        = wt;
    p.env       = env;
    p.public    = pub;
    p.plat      = plat;
    disp('Select and highlight the turbine block which you want to update parameters for and press enter');
    disp('Remember to unlock the library');
    pause
    set_param(gcb,'UserData',p);
    set_param(gcb,'UserDataPersistent','on');
end


% % Uncomment for additional plots
% figure(3)
% hold off
% [lc,h] = contour(u(20:100),beta(1:125),P(1:125,20:100),[1e6 2e6 3e6 4e6 5.29e6]);
% hold on
% u_3    = [11.4 12:1:25];
% invu_3 = u_3.^-1;
% beta_3 = [0 3.83 6.6 8.7 10.45 12.06 13.54 14.92 16.23 17.47 18.7 19.94 21.18 22.35 23.47];
% plot3(u_3,beta_3,ones(15,1)*5.3e6,'*');
% 
% figure(4)
% hold off
% [dtsr,dbeta] = gradient(P,.1,.2*pi/180);
% ind_3        = sub2ind(size(P),round(1+beta_3/.2),round(wt.rotor.ratedspeed*R.*invu_3/.1));
% P_3          = P(ind_3);
% dpdb         = dbeta(ind_3);
% Pdpdb        = polyfit(beta_3,dpdb,1);
% 
% Ndpdb        = [28.23 43.73 51.66 58.44 64.44 70.46 76.53 83.94 90.67 94.71 99.04 105.90 114.3 120.2 125.3]*-1e6;
% NPdpdb       = polyfit(beta_3,Ndpdb,1);
% 
% plot(beta_3,polyval(Pdpdb,beta_3),'r')
% hold on
% plot(beta_3,dpdb,'r*')
% 
% plot(beta_3,polyval(NPdpdb,beta_3),'g')
% plot(beta_3,Ndpdb,'g*')

